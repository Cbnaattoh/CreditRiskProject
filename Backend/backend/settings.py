"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta

# Load environment variables from .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG')

ALLOWED_HOSTS = []

# Authentication settings
AUTH_USER_MODEL = 'users.User'
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']

# Session settings
SESSION_COOKIE_AGE = 3600  # 1 hour in seconds
SESSION_COOKIE_AGE_REMEMBER = 1209600  # 2 weeks in seconds
SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Security settings
PASSWORD_EXPIRATION_DAYS = 90  # Require password change every 90 days
MAX_LOGIN_ATTEMPTS = 5  # Lock account after 5 failed attempts



# JWT Settings (if using JWT)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# Risk model paths
RISK_MODEL_PATH = os.path.join(BASE_DIR, 'ai_models/risk_model_v1.pkl')
SCALER_PATH = os.path.join(BASE_DIR, 'ai_models/scaler_v1.pkl')
DECISION_MODEL_PATH = os.path.join(BASE_DIR, 'ai_models/decision_model_v1.pkl')

# Risk model features
RISK_MODEL_FEATURES = [
    'age', 'marital_status', 'employment_duration', 
    'monthly_income', 'net_worth', 'credit_score',
    'requested_amount', 'loan_term'
]

# Decision policy rules
DECISION_POLICY_RULES = {
    'max_approval_amount': 50000,
    'base_interest_rate': 5.0,
    'min_risk_score_for_approval': 500,
    'max_debt_to_income': 0.45
}

# Behavioral thresholds
BEHAVIORAL_THRESHOLDS = {
    'alert_threshold': 0.3,
    'update_threshold': 0.7,
    'typing_weight': 0.7,
    'mouse_weight': 0.3
}

BEHAVIORAL_ANALYSIS_ENABLED = False

if DEBUG:
    BEHAVIORAL_MODELS = {
        'TYPING_MODEL_PATH': '/dev/null',
        'MOUSE_MODEL_PATH': '/dev/null',
        'BEHAVIORAL_THRESHOLD': 0.7
    }
else:
    BEHAVIORAL_MODELS = {
        'TYPING_MODEL_PATH': os.path.join(BASE_DIR, 'ai_models/typing_model.pkl'),
        'MOUSE_MODEL_PATH': os.path.join(BASE_DIR, 'ai_models/mouse_model.pkl'),
        'BEHAVIORAL_THRESHOLD': 0.7
    }


# Document verification
ADVANCED_DOCUMENT_VERIFICATION = True
DOCUMENT_VERIFICATION_API_KEY = os.getenv('DOCUMENT_VERIFICATION_API_KEY')
DOCUMENT_TEMPLATES = {
    'DRIVER_LICENSE': {
        'dimensions': (3.375, 2.125),  # inches
        'security_features': ['hologram', 'microprint']
    },
    'PASSPORT': {
        'dimensions': (5.0, 3.5),
        'security_features': ['mrz', 'watermark']
    }
}


# Email settings for password reset
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT', 587)
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', True)
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@yourdomain.com')

# Password reset timeout (2 hours)
PASSWORD_RESET_TIMEOUT = 7200

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # custom apps
    'ai',
    'api',
    'applications',
    'config',
    'documents',
    'integrations',
    'ml_model',
    'notifications',
    'risk',
    'security',
    'users',
    
    # third party apps
    'rest_framework',
    'corsheaders',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'channels'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'security.middleware.BehavioralMiddleware',
    'security.middleware.PasswordExpirationMiddleware',

]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'
# ASGI_APPLICATION = 'backend.asgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
      'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'), 
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
