# ============================================================================
# RiskGuard - Full-stack credit risk management platform with all services
# ============================================================================

version: '3.8'

services:
  # ================================
  # DATABASE SERVICE
  # ================================
  database:
    image: postgres:15-alpine
    container_name: riskguard-database
    environment:
      POSTGRES_DB: riskguard_db
      POSTGRES_USER: riskguard_user
      POSTGRES_PASSWORD: RiskGuard2024!
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - riskguard-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U riskguard_user -d riskguard_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ================================
  # REDIS CACHE & SESSION STORE
  # ================================
  redis:
    image: redis:7-alpine
    container_name: riskguard-redis
    command: redis-server --appendonly yes --requirepass RiskGuard2024!
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - riskguard-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # ================================
  # BACKEND APPLICATION
  # ================================
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: riskguard-backend
    environment:
      # Django Configuration
      - SECRET_KEY=riskguard-super-secret-key-for-supervisor-demo-2024
      - DEBUG=False
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      
      # Database Configuration
      - DB_NAME=riskguard_db
      - DB_USER=riskguard_user
      - DB_PASSWORD=RiskGuard2024!
      - DB_HOST=database
      - DB_PORT=5432
      
      # Redis Configuration
      - REDIS_URL=redis://:RiskGuard2024!@redis:6379/0
      - CELERY_BROKER_URL=redis://:RiskGuard2024!@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:RiskGuard2024!@redis:6379/0
      
      # Admin User Configuration
      - DJANGO_SUPERUSER_EMAIL=supervisor@riskguard.com
      - DJANGO_SUPERUSER_PASSWORD=SupervisorAccess2024!
      
      # ML Model Configuration
      - ML_PROCESSING_ENABLED=True
      - ML_AUTO_TRIGGER_ON_SUBMIT=True
      - ML_CONFIDENCE_THRESHOLD=0.7
      - GHANA_EMPLOYMENT_ANALYSIS_ENABLED=True
      
      # Email Configuration (Console backend for demo)
      - EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
      - DEFAULT_FROM_EMAIL=noreply@riskguard.com
      
      # Security Settings
      - PASSWORD_EXPIRATION_DAYS=90
      - MFA_TOKEN_EXPIRY=300
      - MAX_LOGIN_ATTEMPTS=5
      - LOGIN_LOCKOUT_DURATION=3600
    
    volumes:
      - backend_media:/app/media
      - backend_static:/app/static
      - backend_logs:/app/logs
    
    ports:
      - "8000:8000"
    
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - riskguard-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    restart: unless-stopped

  # ================================
  # CELERY WORKER (Background Tasks)
  # ================================
  celery-worker:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: riskguard-celery-worker
    command: celery -A backend worker --loglevel=info --concurrency=2
    environment:
      # Django Configuration
      - SECRET_KEY=riskguard-super-secret-key-for-supervisor-demo-2024
      - DEBUG=False
      
      # Database Configuration
      - DB_NAME=riskguard_db
      - DB_USER=riskguard_user
      - DB_PASSWORD=RiskGuard2024!
      - DB_HOST=database
      - DB_PORT=5432
      
      # Redis Configuration
      - REDIS_URL=redis://:RiskGuard2024!@redis:6379/0
      - CELERY_BROKER_URL=redis://:RiskGuard2024!@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:RiskGuard2024!@redis:6379/0
      
      # ML Configuration
      - ML_PROCESSING_ENABLED=True
      - ML_AUTO_TRIGGER_ON_SUBMIT=True
      - GHANA_EMPLOYMENT_ANALYSIS_ENABLED=True
    
    volumes:
      - backend_media:/app/media
      - backend_logs:/app/logs
    
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    
    networks:
      - riskguard-network
    
    restart: unless-stopped

  # ================================
  # CELERY BEAT (Scheduled Tasks)
  # ================================
  celery-beat:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: riskguard-celery-beat
    command: celery -A backend beat --loglevel=info
    environment:
      # Django Configuration
      - SECRET_KEY=riskguard-super-secret-key-for-supervisor-demo-2024
      - DEBUG=False
      
      # Database Configuration
      - DB_NAME=riskguard_db
      - DB_USER=riskguard_user
      - DB_PASSWORD=RiskGuard2024!
      - DB_HOST=database
      - DB_PORT=5432
      
      # Redis Configuration
      - REDIS_URL=redis://:RiskGuard2024!@redis:6379/0
      - CELERY_BROKER_URL=redis://:RiskGuard2024!@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:RiskGuard2024!@redis:6379/0
    
    volumes:
      - backend_logs:/app/logs
    
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    
    networks:
      - riskguard-network
    
    restart: unless-stopped

  # ================================
  # FRONTEND APPLICATION
  # ================================
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: riskguard-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - riskguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ================================
  # ML MODEL API SERVICE (Optional)
  # ================================
  ml-api:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: riskguard-ml-api
    command: python ml_model/fastapi_integration.py
    environment:
      - PYTHONPATH=/app
      - ML_MODEL_PATH=/app/ml_model/models
    ports:
      - "8001:8000"
    volumes:
      - backend_logs:/app/logs
    networks:
      - riskguard-network
    depends_on:
      backend:
        condition: service_started
    restart: unless-stopped
    profiles:
      - ml-api  # Optional service, activate with --profile ml-api

  # ================================
  # NGINX REVERSE PROXY
  # ================================
  nginx:
    image: nginx:alpine
    container_name: riskguard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - backend_static:/var/www/static:ro
      - backend_media:/var/www/media:ro
    depends_on:
      - backend
      - frontend
    networks:
      - riskguard-network
    restart: unless-stopped
    profiles:
      - production  # Only for production deployment

  # ================================
  # ADMINER (Database Management)
  # ================================
  adminer:
    image: adminer:latest
    container_name: riskguard-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=database
    depends_on:
      - database
    networks:
      - riskguard-network
    restart: unless-stopped
    profiles:
      - admin-tools  # Optional service for database management

  # ================================
  # REDIS COMMANDER (Redis Management)
  # ================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: riskguard-redis-commander
    environment:
      - REDIS_HOSTS=redis:redis:6379:0:RiskGuard2024!
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - riskguard-network
    restart: unless-stopped
    profiles:
      - admin-tools  # Optional service for Redis management

# ================================
# PERSISTENT VOLUMES
# ================================
volumes:
  postgres_data:
    driver: local
    name: riskguard_postgres_data
  redis_data:
    driver: local
    name: riskguard_redis_data
  backend_media:
    driver: local
    name: riskguard_backend_media
  backend_static:
    driver: local
    name: riskguard_backend_static
  backend_logs:
    driver: local
    name: riskguard_backend_logs

# ================================
# NETWORKS
# ================================
networks:
  riskguard-network:
    driver: bridge
    name: riskguard_network